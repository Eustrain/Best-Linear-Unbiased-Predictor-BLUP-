VarComp <- data.frame()
H2 <- data.frame()
Blups<- data.frame(matrix(vector(),nE,1, dimnames=list(c(), c("Entry"))))
Blups$Entry <- levels(Entry)
if (!is.null(Env)) {
for (i in 1: leng_traits) {
y <- data[,trait[i]]
if (model=="Lattice"){
fm<- lmer(y~(1|Entry)+(1|Rep:Loc)+(1|Block:Rep:Loc)+(1|Entry:Loc)+(1|Loc))
}
else if (model=="RCB"){
fm<- lmer(y~(1|Entry)+(1|Rep:Loc)+(1|Entry:Loc)+(1|Loc))
}
blup <- coef(fm)$Entry
colnames(blup) <- trait[i]
Blups<-cbind(Blups,blup)
###*H2
vc <- VarCorr(fm,comp="Variance")
VG <- vc$Entry[1]
VGE <- vc$`Entry:Loc`[1]
VP<- VG + VGE/nLoc + attr(vc, "sc")^2/(nrep*nLoc)
h2 <-data.frame( h2=VG/VP)
h2$trait <- trait[i]
H2<- rbind(H2,h2)
############
varComp<-as.data.frame(vc)
drops_cc<-  c("Rep:Loc","Block:Rep:Loc")
drops_c <- c("var1","var2","sdcor")
varComp<-varComp[ , !(names(varComp) %in% drops_c )]
varComp<-varComp[ !(varComp$grp %in% drops_cc), ]
varComp$Trait<-trait[i]
VarComp <- rbind(VarComp,varComp)
} #end loop
VarComp_Output <-reshape(VarComp, idvar = "Trait", timevar = "grp", direction = "wide")
names(VarComp_Output) <- c("Trait","GxE","Env","Entry","Error")
VarComp_Output$H2 <- H2$h2
}##End across enviroment
if (is.null(Env)) {
for (i in 1: leng_traits) {
y <- data[,trait[i]]
if(model=="RCB"){
fm <- lmer(y ~ (1|Entry)+(1|Rep))
}
else if (model=="Lattice"){
fm <- lmer(y~(1|Entry)+(1|Rep)+(1|Block:Rep))
}
blup <- coef(fm)$Entry
colnames(blup) <- trait[i]
Blups<-cbind(Blups,blup)
vc <- VarCorr(fm,comp="Variance")
VG <- vc$Entry[1]
VP<- vc$Entry[1] + attr(vc, "sc")^2/nrep
h2 <-data.frame( h2=VG/VP)
h2$trait <- trait[i]
H2<- rbind(H2,h2)
#* Variance Components
varComp<-as.data.frame(vc)
drops_cc<-  c("Block:Rep")
drops <- c("var1","var2","sdcor")
varComp<-varComp[ , !(names(varComp) %in% drops )]
varComp<-varComp[ !(varComp$grp %in% drops_cc), ]
varComp$Trait<-trait[i]
VarComp <- rbind(VarComp,varComp)
}######end FOR LOOP
VarComp_Output <-reshape(VarComp, idvar = "Trait", timevar = "grp", direction = "wide")
VarComp_Output<- round(VarComp_Output[2:4],4)
row.names(VarComp_Output) <-trait
VarComp_Output <- cbind(VarComp_Output ,H2$h2)
names(VarComp_Output) <- c("Genotype","Rep","Error","H2")
} # for one enviroment
result <- list(VarianceComponets=VarComp_Output,Blups=Blups)
} ##end function
d<- Blup_2(fw$geno,fw$rep,fw$BLOCK,Env = NULL,trait,model = "Lattice",fw)
d
setwd("~/Documents/GitHub/Correlation-Gentics/Data")
dat <- read.csv("data.csv",header = T)
head(dat)
names(dat) <- c("geno","rep","ears" ,"len"  ,   "weight"  ,"yield" )
head(dat)
trait <- c("geno","rep","ears" ,"len"  ,   "weight"  ,"yield")
e2 <- Blup_2(dat$geno,dat$rep,Block = NULL,Env = NULL,trait,model = "RCB",dat)
e2
trait <- c("ears" ,"len"  ,   "weight"  ,"yield")
e2 <- Blup_2(dat$geno,dat$rep,Block = NULL,Env = NULL,trait,model = "RCB",dat)
e2
32.9483/ 32.9483+13.8715
32.9483/ (32.9483+13.8715)
205.1176/( 205.1176+72.1612 )
dat
32.9483/ (32.9483+(13.8715/4))
trait <- c("ears" ,"len"  ,   "weight"  ,"yield")
e2 <- Blup_2(dat$geno,dat$rep,Block = NULL,Env = NULL,trait,model = "RCB",dat)
e2
d<- Blup_2(fw$geno,fw$rep,fw$BLOCK,Env = NULL,trait,model = "Lattice",fw)
trait <- c("ALTMZ")
d<- Blup_2(fw$geno,fw$rep,fw$BLOCK,Env = NULL,trait,model = "Lattice",fw)
d
dat <- read.csv("data.csv",header = T)
names(dat) <- c("geno","rep","ears" ,"len"  ,   "weight"  ,"yield" )
head(dat)
trait <- c("ears" ,"len"  ,   "weight"  ,"yield")
Blup_2<-function(Entry,Rep,Block=NULL,Env= NULL,Traits,model=c("RCB","Lattice"),data){
if (!is.null(Block)){
Block <- as.factor(Block)
}
if (!is.null(Env)){
Block <- as.factor(Env)
Loc <- as.factor(Env)
nLoc <- length(levels(Loc))
}
Entry<-as.factor(Entry)
Rep <-as.factor(Rep)
nrep <- length(levels(Rep))
nE <-length(levels(Entry))
leng_traits<- length(trait)
VarComp <- data.frame()
H2 <- data.frame()
Blups<- data.frame(matrix(vector(),nE,1, dimnames=list(c(), c("Entry"))))
Blups$Entry <- levels(Entry)
if (!is.null(Env)) {
for (i in 1: leng_traits) {
y <- data[,trait[i]]
if (model=="Lattice"){
fm<- lmer(y~(1|Entry)+(1|Rep:Loc)+(1|Block:Rep:Loc)+(1|Entry:Loc)+(1|Loc))
}
else if (model=="RCB"){
fm<- lmer(y~(1|Entry)+(1|Rep:Loc)+(1|Entry:Loc)+(1|Loc))
}
blup <- coef(fm)$Entry
colnames(blup) <- trait[i]
Blups<-cbind(Blups,blup)
###*H2
vc <- VarCorr(fm,comp="Variance")
VG <- vc$Entry[1]
VGE <- vc$`Entry:Loc`[1]
VP<- VG + VGE/nLoc + attr(vc, "sc")^2/(nrep*nLoc)
h2 <-data.frame( h2=VG/VP)
h2$trait <- trait[i]
H2<- rbind(H2,h2)
############
varComp<-as.data.frame(vc)
drops_cc<-  c("Rep:Loc","Block:Rep:Loc")
drops_c <- c("var1","var2","sdcor")
varComp<-varComp[ , !(names(varComp) %in% drops_c )]
varComp<-varComp[ !(varComp$grp %in% drops_cc), ]
varComp$Trait<-trait[i]
VarComp <- rbind(VarComp,varComp)
} #end loop
VarComp_Output <-reshape(VarComp, idvar = "Trait", timevar = "grp", direction = "wide")
names(VarComp_Output) <- c("Trait","GxE","Env","Entry","Error")
VarComp_Output$H2 <- H2$h2
}##End across enviroment
if (is.null(Env)) {
for (i in 1: leng_traits) {
y <- data[,trait[i]]
if(model=="RCB"){
fm <- lmer(y ~ (1|Entry)+(1|Rep))
}
else if (model=="Lattice"){
fm <- lmer(y~(1|Entry)+(1|Rep)+(1|Block:Rep))
}
blup <- coef(fm)$Entry
colnames(blup) <- trait[i]
Blups<-cbind(Blups,blup)
vc <- VarCorr(fm,comp="Variance")
VG <- vc$Entry[1]
VP<- vc$Entry[1] + attr(vc, "sc")^2/nrep
h2 <-data.frame( h2=VG/VP)
h2$trait <- trait[i]
H2<- rbind(H2,h2)
#* Variance Components
varComp<-as.data.frame(vc)
drops_cc<-  c("Block:Rep")
drops <- c("var1","var2","sdcor")
varComp<-varComp[ , !(names(varComp) %in% drops )]
varComp<-varComp[ !(varComp$grp %in% drops_cc), ]
varComp$Trait<-trait[i]
VarComp <- rbind(VarComp,varComp)
}######end FOR LOOP
VarComp_Output <-reshape(VarComp, idvar = "Trait", timevar = "grp", direction = "wide")
VarComp_Output<- round(VarComp_Output[2:4],4)
row.names(VarComp_Output) <-trait
VarComp_Output <- cbind(VarComp_Output ,H2$h2)
names(VarComp_Output) <- c("Genotype","Rep","Error","H2")
} # for one enviroment
result <- list(VarianceComponets=VarComp_Output,Blups=Blups)
} ##end function
e2 <- Blup_2(dat$geno,dat$rep,Block = NULL,Env = NULL,trait,model = "RCB",dat)
e2
Blup<-function(Entry,Rep,Block=NULL,Env= NULL,Traits,model=c("RCB","Lattice"),data){
if (!is.null(Block)){
Block <- as.factor(Block)
}
if (!is.null(Env)){
Block <- as.factor(Env)
Loc <- as.factor(Env)
nLoc <- length(levels(Loc))
}
Entry<-as.factor(Entry)
Rep <-as.factor(Rep)
nrep <- length(levels(Rep))
nE <-length(levels(Entry))
leng_traits<- length(trait)
VarComp <- data.frame()
H2 <- data.frame()
Blups<- data.frame(matrix(vector(),nE,1, dimnames=list(c(), c("Entry"))))
Blups$Entry <- levels(Entry)
if (!is.null(Env)) {
for (i in 1: leng_traits) {
y <- data[,trait[i]]
if (model=="Lattice"){
fm<- lmer(y~(1|Entry)+(1|Rep:Loc)+(1|Block:Rep:Loc)+(1|Entry:Loc)+(1|Loc))
}
else if (model=="RCB"){
fm<- lmer(y~(1|Entry)+(1|Rep:Loc)+(1|Entry:Loc)+(1|Loc))
}
blup <- coef(fm)$Entry
colnames(blup) <- trait[i]
Blups<-cbind(Blups,blup)
###*H2
vc <- VarCorr(fm,comp="Variance")
VG <- vc$Entry[1]
VGE <- vc$`Entry:Loc`[1]
VP<- VG + VGE/nLoc + attr(vc, "sc")^2/(nrep*nLoc)
h2 <-data.frame( h2=VG/VP)
h2$trait <- trait[i]
H2<- rbind(H2,h2)
############
varComp<-as.data.frame(vc)
drops_cc<-  c("Rep:Loc","Block:Rep:Loc")
drops_c <- c("var1","var2","sdcor")
varComp<-varComp[ , !(names(varComp) %in% drops_c )]
varComp<-varComp[ !(varComp$grp %in% drops_cc), ]
varComp$Trait<-trait[i]
VarComp <- rbind(VarComp,varComp)
} #end loop
VarComp_Output <-reshape(VarComp, idvar = "Trait", timevar = "grp", direction = "wide")
names(VarComp_Output) <- c("Trait","GxE","Env","Entry","Error")
VarComp_Output$H2 <- H2$h2
}##End across enviroment
if (is.null(Env)) {
for (i in 1: leng_traits) {
y <- data[,trait[i]]
if(model=="RCB"){
fm <- lmer(y ~ (1|Entry)+(1|Rep))
}
else if (model=="Lattice"){
fm <- lmer(y~(1|Entry)+(1|Rep)+(1|Block:Rep))
}
blup <- coef(fm)$Entry
colnames(blup) <- trait[i]
Blups<-cbind(Blups,blup)
vc <- VarCorr(fm,comp="Variance")
VG <- vc$Entry[1]
VP<- vc$Entry[1] + attr(vc, "sc")^2/nrep
h2 <-data.frame( h2=VG/VP)
h2$trait <- trait[i]
H2<- rbind(H2,h2)
#* Variance Components
varComp<-as.data.frame(vc)
drops_cc<-  c("Block:Rep")
drops <- c("var1","var2","sdcor")
varComp<-varComp[ , !(names(varComp) %in% drops )]
varComp<-varComp[ !(varComp$grp %in% drops_cc), ]
varComp$Trait<-trait[i]
VarComp <- rbind(VarComp,varComp)
}######end FOR LOOP
VarComp_Output <-reshape(VarComp, idvar = "Trait", timevar = "grp", direction = "wide")
VarComp_Output<- round(VarComp_Output[2:4],4)
row.names(VarComp_Output) <-trait
VarComp_Output <- cbind(VarComp_Output ,H2$h2)
names(VarComp_Output) <- c("Genotype","Rep","Error","H2")
} # for one enviroment
result <- list(VarianceComponets=VarComp_Output,Blups=Blups)
} ##end function
e2 <- Blup(dat$geno,dat$rep,Block = NULL,Env = NULL,trait,model = "RCB",dat)
e2
setwd("~/Desktop/RES/META-R - 3.5.1/Input")
dat <- read.csv("Sample RCBD Data.csv",head=T)
head(dat)
dat2 <- read.csv("Sample Lattice Data.csv",head=T)
head(dat2)
str(dat2)
str(dat)
head(dat)
str(dat)
names(dat)
train <- c("YLD","AD","SD","PH", "EH","rEPH","rEPP" ,"nP"  )
train
dat$YLD <- as.numeric(dat$YLD)
dat$AD <- as.numeric(dat$AD)
dat$SD <- as.numeric(dat$sd)
dat$SD <- as.numeric(dat$SD)
dat$PH <- as.numeric(dat$PH)
dat$EH <- as.numeric(dat$EH)
dat$rEPH <- as.numeric(dat$rEPH)
d<- Blup_2(dat$Entry,dat$Replication,dat$BLK,dat$Country,trait,model = "Lattice",dat)
train <- c("YLD","AD","SD","PH", "EH","rEPH")
d<- Blup_2(dat$Entry,dat$Replication,dat$BLK,dat$Country,trait,model = "RCB",dat)
d<- Blup_2(dat$Entry,dat$Replication,dat$BLK,dat$Country,trait,model = "RCB",dat)
head(dat)
Blup<-function(Entry,Rep,Block=NULL,Env= NULL,Traits,model=c("RCB","Lattice"),data){
if (!is.null(Block)){
Block <- as.factor(Block)
}
if (!is.null(Env)){
Block <- as.factor(Env)
Loc <- as.factor(Env)
nLoc <- length(levels(Loc))
}
Entry<-as.factor(Entry)
Rep <-as.factor(Rep)
nrep <- length(levels(Rep))
nE <-length(levels(Entry))
leng_traits<- length(trait)
VarComp <- data.frame()
H2 <- data.frame()
Blups<- data.frame(matrix(vector(),nE,1, dimnames=list(c(), c("Entry"))))
Blups$Entry <- levels(Entry)
if (!is.null(Env)) {
for (i in 1: leng_traits) {
y <- data[,trait[i]]
if (model=="Lattice"){
fm<- lmer(y~(1|Entry)+(1|Rep:Loc)+(1|Block:Rep:Loc)+(1|Entry:Loc)+(1|Loc))
}
else if (model=="RCB"){
fm<- lmer(y~(1|Entry)+(1|Rep:Loc)+(1|Entry:Loc)+(1|Loc))
}
blup <- coef(fm)$Entry
colnames(blup) <- trait[i]
Blups<-cbind(Blups,blup)
###*H2
vc <- VarCorr(fm,comp="Variance")
VG <- vc$Entry[1]
VGE <- vc$`Entry:Loc`[1]
VP<- VG + VGE/nLoc + attr(vc, "sc")^2/(nrep*nLoc)
h2 <-data.frame( h2=VG/VP)
h2$trait <- trait[i]
H2<- rbind(H2,h2)
############
varComp<-as.data.frame(vc)
drops_cc<-  c("Rep:Loc","Block:Rep:Loc")
drops_c <- c("var1","var2","sdcor")
varComp<-varComp[ , !(names(varComp) %in% drops_c )]
varComp<-varComp[ !(varComp$grp %in% drops_cc), ]
varComp$Trait<-trait[i]
VarComp <- rbind(VarComp,varComp)
} #end loop
VarComp_Output <-reshape(VarComp, idvar = "Trait", timevar = "grp", direction = "wide")
names(VarComp_Output) <- c("Trait","GxE","Env","Entry","Error")
VarComp_Output$H2 <- H2$h2
}##End across enviroment
if (is.null(Env)) {
for (i in 1: leng_traits) {
y <- data[,trait[i]]
if(model=="RCB"){
fm <- lmer(y ~ (1|Entry)+(1|Rep))
}
else if (model=="Lattice"){
fm <- lmer(y~(1|Entry)+(1|Rep)+(1|Block:Rep))
}
blup <- coef(fm)$Entry
colnames(blup) <- trait[i]
Blups<-cbind(Blups,blup)
vc <- VarCorr(fm,comp="Variance")
VG <- vc$Entry[1]
VP<- vc$Entry[1] + attr(vc, "sc")^2/nrep
h2 <-data.frame( h2=VG/VP)
h2$trait <- trait[i]
H2<- rbind(H2,h2)
#* Variance Components
varComp<-as.data.frame(vc)
drops_cc<-  c("Block:Rep")
drops <- c("var1","var2","sdcor")
varComp<-varComp[ , !(names(varComp) %in% drops )]
varComp<-varComp[ !(varComp$grp %in% drops_cc), ]
varComp$Trait<-trait[i]
VarComp <- rbind(VarComp,varComp)
}######end FOR LOOP
VarComp_Output <-reshape(VarComp, idvar = "Trait", timevar = "grp", direction = "wide")
VarComp_Output<- round(VarComp_Output[2:4],4)
row.names(VarComp_Output) <-trait
VarComp_Output <- cbind(VarComp_Output ,H2$h2)
names(VarComp_Output) <- c("Genotype","Rep","Error","H2")
} # for one enviroment
result <- list(VarianceComponets=VarComp_Output,Blups=Blups)
} ##end function
trait <- c("YLD","AD","SD","PH", "EH","rEPH")
d<- Blup_2(dat$Entry,dat$Replication,dat$BLK,dat$Country,trait,model = "RCB",dat)
d
d<- Blup_2(dat$Entry,dat$Replication,dat$BLK,dat$SiteNo,trait,model = "RCB",dat)
d
d<- Blup_2(dat$Entry,dat$Replication,dat$BLK,dat$Country,trait,model = "RCB",dat)
d
head(dat)
d<- Blup_2(dat$Entry,dat$Replication,dat$BLK,dat$Location,trait,model = "RCB",dat)
d
9.285960e-01
View(dat)
e2
d
Blup<-function(Entry,Rep,Block=NULL,Env= NULL,Traits,model=c("RCB","Lattice"),data){
if (!is.null(Block)){
Block <- as.factor(Block)
}
if (!is.null(Env)){
Block <- as.factor(Env)
Loc <- as.factor(Env)
nLoc <- length(levels(Loc))
}
Entry<-as.factor(Entry)
Rep <-as.factor(Rep)
nrep <- length(levels(Rep))
nE <-length(levels(Entry))
leng_traits<- length(trait)
VarComp <- data.frame()
H2 <- data.frame()
H2 <- round(H2[2],6)
Blups<- data.frame(matrix(vector(),nE,1, dimnames=list(c(), c("Entry"))))
Blups$Entry <- levels(Entry)
if (!is.null(Env)) {
for (i in 1: leng_traits) {
y <- data[,trait[i]]
if (model=="Lattice"){
fm<- lmer(y~(1|Entry)+(1|Rep:Loc)+(1|Block:Rep:Loc)+(1|Entry:Loc)+(1|Loc))
}
else if (model=="RCB"){
fm<- lmer(y~(1|Entry)+(1|Rep:Loc)+(1|Entry:Loc)+(1|Loc))
}
blup <- coef(fm)$Entry
colnames(blup) <- trait[i]
Blups<-cbind(Blups,blup)
###*H2
vc <- VarCorr(fm,comp="Variance")
VG <- vc$Entry[1]
VGE <- vc$`Entry:Loc`[1]
VP<- VG + VGE/nLoc + attr(vc, "sc")^2/(nrep*nLoc)
h2 <-data.frame( h2=VG/VP)
h2$trait <- trait[i]
H2<- rbind(H2,h2)
############
varComp<-as.data.frame(vc)
drops_cc<-  c("Rep:Loc","Block:Rep:Loc")
drops_c <- c("var1","var2","sdcor")
varComp<-varComp[ , !(names(varComp) %in% drops_c )]
varComp<-varComp[ !(varComp$grp %in% drops_cc), ]
varComp$Trait<-trait[i]
VarComp <- rbind(VarComp,varComp)
} #end loop
VarComp_Output <-reshape(VarComp, idvar = "Trait", timevar = "grp", direction = "wide")
names(VarComp_Output) <- c("Trait","GxE","Env","Entry","Error")
VarComp_Output$H2 <- H2$h2
}##End across enviroment
if (is.null(Env)) {
for (i in 1: leng_traits) {
y <- data[,trait[i]]
if(model=="RCB"){
fm <- lmer(y ~ (1|Entry)+(1|Rep))
}
else if (model=="Lattice"){
fm <- lmer(y~(1|Entry)+(1|Rep)+(1|Block:Rep))
}
blup <- coef(fm)$Entry
colnames(blup) <- trait[i]
Blups<-cbind(Blups,blup)
vc <- VarCorr(fm,comp="Variance")
VG <- vc$Entry[1]
VP<- vc$Entry[1] + attr(vc, "sc")^2/nrep
h2 <-data.frame( h2=VG/VP)
h2$trait <- trait[i]
H2<- rbind(H2,h2)
#* Variance Components
varComp<-as.data.frame(vc)
drops_cc<-  c("Block:Rep")
drops <- c("var1","var2","sdcor")
varComp<-varComp[ , !(names(varComp) %in% drops )]
varComp<-varComp[ !(varComp$grp %in% drops_cc), ]
varComp$Trait<-trait[i]
VarComp <- rbind(VarComp,varComp)
}######end FOR LOOP
VarComp_Output <-reshape(VarComp, idvar = "Trait", timevar = "grp", direction = "wide")
VarComp_Output<- round(VarComp_Output[2:4],4)
row.names(VarComp_Output) <-trait
VarComp_Output <- cbind(VarComp_Output ,H2$h2)
names(VarComp_Output) <- c("Genotype","Rep","Error","H2")
} # for one enviroment
result <- list(VarianceComponets=VarComp_Output,Blups=Blups)
} ##end function
d<- Blup_2(dat$Entry,dat$Replication,dat$BLK,dat$Location,trait,model = "RCB",dat)
d
9.285960e-01
setwd("~/Documents/GitHub/Best-Linear-Unbiased-Predictor-BLUP-")
write(dat,"dat.csv")
write.csv(dat,"dat_RCB.csv")
setwd("~/Documents/GitHub/Best-Linear-Unbiased-Predictor-BLUP-/data")
write.csv(dat,"dat_RCB.csv")
Ex_1<- Blup_2(dat$Entry,dat$Replication,dat$BLK,dat$Location,trait,model = "RCB",dat)
Ex_1
setwd("~/Documents/GitHub/Correlation-Gentics/Data")
dat <- read.csv("data.csv",header = T)
names(dat) <- c("geno","rep","ears" ,"len"  ,   "weight"  ,"yield" )
head(dat)
trait <- c("ears" ,"len"  ,   "weight"  ,"yield")
Ex_2<- Blup_2(dat$geno,dat$rep,Block = NULL,Env=NULL,trait,model = "RCB",dat)
Ex_2
setwd("~/Documents/GitHub/Best-Linear-Unbiased-Predictor-BLUP-/data")
write.csv(dat,"dat_2".csv)
write.csv(dat,"dat_2.csv")
setwd("~/Documents/GitHub/Best-Linear-Unbiased-Predictor-BLUP-")
Ex_2
Ex_2$VarianceComponets
Ex_2$Blups
