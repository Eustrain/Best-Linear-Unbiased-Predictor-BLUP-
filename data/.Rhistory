VarComp_Output <-reshape(VarComp, idvar = "Trait", timevar = "grp", direction = "wide")
VarComp_Output<- round(VarComp_Output[2:4],4)
row.names(VarComp_Output) <-trait
VarComp_Output <- cbind(VarComp_Output ,H2$h2)
names(VarComp_Output) <- c("Genotype","Rep","Error","H2")
} # end for one enviroment
result <- list(VarianceComponets=VarComp_Output,Blups=Blups)
} ##end function
Ex_1<- Blup_2(dat$Entry,dat$Replication,dat$BLK,dat$Location,trait,model = "RCB",dat)
Ex_1<- Blup(dat$Entry,dat$Replication,dat$BLK,dat$Location,trait,model = "RCB",dat)
names(dat)
dat$rEPH <- as.numeric(dat$rEPH)
trait <- c("ears" ,"len"  ,   "weight"  ,"yield")
Ex_1<- Blup(dat$Entry,dat$Replication,dat$BLK,dat$Location,trait,model = "RCB",dat)
dat <- read.csv("data_2.csv",header = T)
dat <- read.csv("dat_2.csv",header = T)
names(dat) <- c("geno","rep","ears" ,"len"  ,   "weight"  ,"yield" )
head(dat)
trait <- c("ears" ,"len"  ,   "weight"  ,"yield")
Ex_2<- Blup(dat$geno,dat$rep,Block = NULL,Env=NULL,trait,model = "RCB",dat)
####################################################################
####################**Across Enviroment RCB **######################
####################      Example 1     ###########################
library(lme4)
library(dplyr)
dat <- read.csv("dat_2.csv",header = T)
names(dat) <- c("geno","rep","ears" ,"len"  ,   "weight"  ,"yield" )
head(dat)
trait <- c("ears" ,"len"  ,   "weight"  ,"yield")
Ex_2<- Blup(dat$geno,dat$rep,Block = NULL,Env=NULL,trait,model = "RCB",dat)
Blup<-function(Entry,Rep,Block=NULL,Env= NULL,Traits,model=c("RCB","Lattice"),data){
if (!is.null(Block)){
Block <- as.factor(Block)
}
if (!is.null(Env)){
Block <- as.factor(Env)
Loc <- as.factor(Env)
nLoc <- length(levels(Loc))
}
Entry<-as.factor(Entry)
Rep <-as.factor(Rep)
nrep <- length(levels(Rep))
nE <-length(levels(Entry))
leng_traits<- length(trait)
############Data frame out
VarComp <- data.frame()
H2 <- data.frame()
Blups<- data.frame(matrix(vector(),nE,1, dimnames=list(c(), c("Entry"))))
Blups$Entry <- levels(Entry)
############Loop
if (!is.null(Env)) {
for (i in 1: leng_traits) {
y <- data[,trait[i]]
if (model=="Lattice"){
fm<- lmer(y~(1|Entry)+(1|Rep:Loc)+(1|Block:Rep:Loc)+(1|Entry:Loc)+(1|Loc))
}
else if (model=="RCB"){
fm<- lmer(y~(1|Entry)+(1|Rep:Loc)+(1|Entry:Loc)+(1|Loc))
}
blup <- coef(fm)$Entry
colnames(blup) <- trait[i]
Blups<-cbind(Blups,blup)
### h2
vc <- VarCorr(fm,comp="Variance")
VG <- vc$Entry[1]
VGE <- vc$`Entry:Loc`[1]
VP<- VG + VGE/nLoc + attr(vc, "sc")^2/(nrep*nLoc)
h2 <-data.frame( h2=VG/VP)
h2$trait <- trait[i]
H2<- rbind(H2,h2)
#### Variance Componets
varComp<-as.data.frame(vc)
drops_cc<-  c("Rep:Loc","Block:Rep:Loc")
drops_c <- c("var1","var2","sdcor")
varComp<-varComp[ , !(names(varComp) %in% drops_c )]
varComp<-varComp[ !(varComp$grp %in% drops_cc), ]
varComp$Trait<-trait[i]
VarComp <- rbind(VarComp,varComp)
} #end loop
VarComp_Output <-reshape(VarComp, idvar = "Trait", timevar = "grp", direction = "wide")
names(VarComp_Output) <- c("Trait","GxE","Env","Entry","Error")
VarComp_Output$H2 <- H2$h2
}##End across enviroment
#####################################################################
if (is.null(Env)) {
for (i in 1: leng_traits) {
y <- data[,trait[i]]
if(model=="RCB"){
fm <- lmer(y ~ (1|Entry)+(1|Rep))
}
else if (model=="Lattice"){
fm <- lmer(y~(1|Entry)+(1|Rep)+(1|Block:Rep))
}
blup <- coef(fm)$Entry
colnames(blup) <- trait[i]
Blups<-cbind(Blups,blup)
######h2
vc <- VarCorr(fm,comp="Variance")
VG <- vc$Entry[1]
VP<- vc$Entry[1] + attr(vc, "sc")^2/nrep
h2 <-data.frame( h2=VG/VP)
h2$trait <- trait[i]
H2<- rbind(H2,h2)
#* Variance Components
varComp<-as.data.frame(vc)
drops_cc<-  c("Block:Rep")
drops <- c("var1","var2","sdcor")
varComp<-varComp[ , !(names(varComp) %in% drops )]
varComp<-varComp[ !(varComp$grp %in% drops_cc), ]
varComp$Trait<-trait[i]
VarComp <- rbind(VarComp,varComp)
}##end for loop for one enviroment
VarComp_Output <-reshape(VarComp, idvar = "Trait", timevar = "grp", direction = "wide")
VarComp_Output<- round(VarComp_Output[2:4],4)
row.names(VarComp_Output) <-trait
VarComp_Output <- cbind(VarComp_Output ,H2$h2)
names(VarComp_Output) <- c("Genotype","Rep","Error","H2")
} # end for one enviroment
result <- list(VarianceComponets=VarComp_Output,Blups=Blups)
} ##end function
head(dat)
dat <- read.csv("dat_2.csv",header = T)
head(dat)
names(dat) <- c("","geno","rep","ears" ,"len"  ,   "weight"  ,"yield" )
head(dat)
trait <- c("ears" ,"len"  ,   "weight"  ,"yield")
Ex_2<- Blup(dat$geno,dat$rep,Block = NULL,Env=NULL,trait,model = "RCB",dat)
Ex_2
dat <- read.csv("dat_RCB.csv",head=T)
names(dat)
dat$YLD <- as.numeric(dat$YLD)
dat$AD <- as.numeric(dat$AD)
dat$SD <- as.numeric(dat$SD)
dat$PH <- as.numeric(dat$PH)
dat$EH <- as.numeric(dat$EH)
dat$rEPH <- as.numeric(dat$rEPH)
trait <- c("ears" ,"len"  ,   "weight"  ,"yield")
trait <- c("ears" ,"len","weight","yield")
Ex_1<- Blup(dat$Entry,dat$Replication,dat$BLK,dat$Location,trait,model = "RCB",dat)
dat$YLD <- as.numeric(dat$YLD)
dat$AD <- as.numeric(dat$AD)
dat$SD <- as.numeric(dat$SD)
dat$PH <- as.numeric(dat$PH)
dat$EH <- as.numeric(dat$EH)
dat$rEPH <- as.numeric(dat$rEPH)
trait <- c("ears" ,"len","weight","yield")
trait <- c("ears" ,"len","weight","yield")
trait <- c("YLD" ,"AD","SD","PH","EH","rEPH")
Ex_1<- Blup(dat$Entry,dat$Replication,dat$BLK,dat$Location,trait,model = "RCB",dat)
Ex_1
hist(Ex_1$Blups$YLD)
Entry_means <- tapply(dat$YLD, dat$Entry, mean)
Entry_means
plot(Entry_means,Ex_1$Blups$YLD)
m1<-lm(Entry_means~Ex_1$Blups$YLD)
summary(m1)
1.077e+00
plot(Entry_means,Ex_1$Blups$YLD)
abline(m1)
hist(Entry_means)
par(2)
hist(Ex_1$Blups$YLD)
Entry_means
hist(Ex_1$Blups$YLD)
f <- cbind(Entry_means,Ex_1$Blups$YLD)
f
Entry_means <- tapply(dat$AD, dat$Entry, mean)
Entry_means <- tapply(dat$AD, dat$Entry, mean)
f <- cbind(Entry_means,Ex_1$Blups$AD)
f
plot(Entry_means,Ex_1$Blups$AD)
hist(Entry_means)
hist(Ex_1$Blups$AD))
hist(Ex_1$Blups$AD)
dat <- read.csv("dat_RCB.csv",head=T)
names(dat)
dat$YLD <- as.numeric(dat$YLD)
dat$AD <- as.numeric(dat$AD)
dat$SD <- as.numeric(dat$SD)
dat$PH <- as.numeric(dat$PH)
dat$EH <- as.numeric(dat$EH)
dat$rEPH <- as.numeric(dat$rEPH)
trait <- c("YLD" ,"AD","SD","PH","EH","rEPH")
Ex_1<- Blup(dat$Entry,dat$Replication,dat$BLK,dat$Location,trait,model = "RCB",dat)
Blup<-function(Entry,Rep,Block=NULL,Env= NULL,Traits,model=c("RCB","Lattice"),data){
if (!is.null(Block)){
Block <- as.factor(Block)
}
if (!is.null(Env)){
Block <- as.factor(Env)
Loc <- as.factor(Env)
nLoc <- length(levels(Loc))
}
Entry<-as.factor(Entry)
Rep <-as.factor(Rep)
nrep <- length(levels(Rep))
nE <-length(levels(Entry))
leng_traits<- length(trait)
############Data frame out
VarComp <- data.frame()
H2 <- data.frame()
Blups<- data.frame(matrix(vector(),nE,1, dimnames=list(c(), c("Entry"))))
Blups$Entry <- levels(Entry)
############Loop
if (!is.null(Env)) {
for (i in 1: leng_traits) {
y <- data[,trait[i]]
if (model=="Lattice"){
fm<- lmer(y~(1|Entry)+(1|Rep:Loc)+(1|Block:Rep:Loc)+(1|Entry:Loc)+(1|Loc))
}
else if (model=="RCB"){
fm<- lmer(y~(1|Entry)+(1|Rep:Loc)+(1|Entry:Loc)+(1|Loc))
}
blup <- coef(fm)$Entry
colnames(blup) <- trait[i]
Blups<-cbind(Blups,blup)
### h2
vc <- VarCorr(fm,comp="Variance")
VG <- vc$Entry[1]
VGE <- vc$`Entry:Loc`[1]
VP<- VG + VGE/nLoc + attr(vc, "sc")^2/(nrep*nLoc)
h2 <-data.frame( h2=VG/VP)
h2$trait <- trait[i]
H2<- rbind(H2,h2)
#### Variance Componets
varComp<-as.data.frame(vc)
drops_cc<-  c("Rep:Loc","Block:Rep:Loc")
drops_c <- c("var1","var2","sdcor")
varComp<-varComp[ , !(names(varComp) %in% drops_c )]
varComp<-varComp[ !(varComp$grp %in% drops_cc), ]
varComp$Trait<-trait[i]
VarComp <- rbind(VarComp,varComp)
} #end loop
VarComp_Output <-reshape(VarComp, idvar = "Trait", timevar = "grp", direction = "wide")
names(VarComp_Output) <- c("Trait","GxE","Env","Entry","Error")
VarComp_Output$H2 <- H2$h2
}##End across enviroment
#####################################################################
if (is.null(Env)) {
for (i in 1: leng_traits) {
y <- data[,trait[i]]
if(model=="RCB"){
fm <- lmer(y ~ (1|Entry)+(1|Rep))
}
else if (model=="Lattice"){
fm <- lmer(y~(1|Entry)+(1|Rep)+(1|Block:Rep))
}
blup <- coef(fm)$Entry
colnames(blup) <- trait[i]
Blups<-cbind(Blups,blup)
######h2
vc <- VarCorr(fm,comp="Variance")
VG <- vc$Entry[1]
VP<- vc$Entry[1] + attr(vc, "sc")^2/nrep
h2 <-data.frame( h2=VG/VP)
h2$trait <- trait[i]
H2<- rbind(H2,h2)
#* Variance Components
varComp<-as.data.frame(vc)
drops_cc<-  c("Block:Rep")
drops <- c("var1","var2","sdcor")
varComp<-varComp[ , !(names(varComp) %in% drops )]
varComp<-varComp[ !(varComp$grp %in% drops_cc), ]
varComp$Trait<-trait[i]
VarComp <- rbind(VarComp,varComp)
}##end for loop for one enviroment
VarComp_Output <-reshape(VarComp, idvar = "Trait", timevar = "grp", direction = "wide")
VarComp_Output<- round(VarComp_Output[2:4],4)
row.names(VarComp_Output) <-trait
VarComp_Output <- cbind(VarComp_Output ,H2$h2)
names(VarComp_Output) <- c("Genotype","Rep","Error","H2")
} # end for one enviroment
result <- list(VarianceComponets=VarComp_Output,Blups=Blups)
} ##end function
Ex_1<- Blup(dat$Entry,dat$Replication,dat$BLK,dat$Location,trait,model = "RCB",dat)
Ex_1$VarianceComponets# <- variance componets and H2
Ex_1$Blups ## <- BLUPS
rm(list = ls())
setwd("~/Documents/Articulos/Mix model book/Varince/Ch 3")
barleyprogeny.unbalanced <- read.table(
"barley progeny.txt",
header=TRUE)
attach(barleyprogeny.unbalanced)
fline <- factor(line)
fblock <- factor(block)
barleyprogeny.model1aov <- aov(yield_g_m2 ~ fline +
Error(fblock))
summary(barleyprogeny.model1aov)
detach(barleyprogeny.unbalanced)
barleyprogeny.padded <- read.table(
"barley progeny padded.txt",
header=TRUE)
attach(barleyprogeny.padded)
fline <- factor(line)
fblock <- factor(block)
barleyprogeny.model1aov <- aov(yield_g_m2 ~ fline +
Error(fblock))
summary(barleyprogeny.model1aov)
detach(barleyprogeny.padded)
rm(list = ls())
barleyprogeny.unbalanced <- read.table(
"barley progeny.txt",
header=TRUE)
attach(barleyprogeny.unbalanced)
fline <- factor(line)
fblock <- factor(block)
library(lme4)
barleyprogeny.model1lmer <-
lmer(yield_g_m2 ~ 1 + (1|fblock) + (1|fline),
data = barleyprogeny.unbalanced)
summary(barleyprogeny.model1lmer)
barleyprogeny.model2lmer <-
lmer(yield_g_m2 ~ 1 + (1|fblock),
data = barleyprogeny.unbalanced)
summary(barleyprogeny.model2lmer)
barleyprogeny.model3lmer <-
lmer(yield_g_m2 ~ 1 + (1|fline),
data = barleyprogeny.unbalanced)
summary(barleyprogeny.model3lmer)
barleyprogeny.model4lmer <-
lmer(yield_g_m2 ~ 1 + (1|fline) + (1|fblock) + (1|fline:fblock),
barleyprogeny.unbalanced)
barleyprogeny.model4lmer <-
lmer(yield_g_m2 ~ 1 + (1|fline) + (1|fblock) + (1|fline:fblock),
barleyprogeny.unbalanced)
one <- factor(rep(1, each = length(yield_g_m2)))
one
barleyprogeny.model4lmer <-
lmer(yield_g_m2 ~ 1 + (1|fline) + (1|fblock) + (1|fline:fblock),
barleyprogeny.unbalanced)
barleyprogeny.model5lmer <-
lmer(yield_g_m2 ~ 1 + (1|one) ,
barleyprogeny.unbalanced)
rm(list = ls())
barleyprogeny.unbalanced <- read.table(
"barley progeny.txt",
header=TRUE)
attach(barleyprogeny.unbalanced)
fline <- factor(line)
fblock <- factor(block)
barleyprogeny.model1lm <- lm(yield_g_m2 ~ fline)
summary(barleyprogeny.model1lm)
library(nlme)
barleyprogeny.model1lme <- lme(yield_g_m2 ~ 1,
data = barleyprogeny.unbalanced, random = ~ 1|fline)
summary(barleyprogeny.model1lme)
coef(barleyprogeny.model1lme)
summary(barleyprogeny.model1lme)
barleyprogeny.model1lm <- lm(yield_g_m2 ~ fline)
summary(barleyprogeny.model1lm)
654.485  +209.245
summary(barleyprogeny.model1lme)
coef(barleyprogeny.model1lme)
setwd("~/Documents/GitHub/Best-Linear-Unbiased-Predictor-BLUP-/data")
dat <- read.csv("dat_2.csv",header = T)
names(dat) <- c("","geno","rep","ears" ,"len"  ,   "weight"  ,"yield" )
head(dat)
trait <- c("ears" ,"len"  ,   "weight"  ,"yield")
Ex_2<- Blup(dat$geno,dat$rep,Block = NULL,Env=NULL,trait,model = "RCB",dat)
Blup<-function(Entry,Rep,Block=NULL,Env= NULL,Traits,model=c("RCB","Lattice"),data){
if (!is.null(Block)){
Block <- as.factor(Block)
}
if (!is.null(Env)){
Block <- as.factor(Env)
Loc <- as.factor(Env)
nLoc <- length(levels(Loc))
}
Entry<-as.factor(Entry)
Rep <-as.factor(Rep)
nrep <- length(levels(Rep))
nE <-length(levels(Entry))
leng_traits<- length(trait)
############Data frame out
VarComp <- data.frame()
H2 <- data.frame()
Blups<- data.frame(matrix(vector(),nE,1, dimnames=list(c(), c("Entry"))))
Blups$Entry <- levels(Entry)
############Loop
if (!is.null(Env)) {
for (i in 1: leng_traits) {
y <- data[,trait[i]]
if (model=="Lattice"){
fm<- lmer(y~(1|Entry)+(1|Rep:Loc)+(1|Block:Rep:Loc)+(1|Entry:Loc)+(1|Loc))
}
else if (model=="RCB"){
fm<- lmer(y~(1|Entry)+(1|Rep:Loc)+(1|Entry:Loc)+(1|Loc))
}
blup <- coef(fm)$Entry
colnames(blup) <- trait[i]
Blups<-cbind(Blups,blup)
### h2
vc <- VarCorr(fm,comp="Variance")
VG <- vc$Entry[1]
VGE <- vc$`Entry:Loc`[1]
VP<- VG + VGE/nLoc + attr(vc, "sc")^2/(nrep*nLoc)
h2 <-data.frame( h2=VG/VP)
h2$trait <- trait[i]
H2<- rbind(H2,h2)
#### Variance Componets
varComp<-as.data.frame(vc)
drops_cc<-  c("Rep:Loc","Block:Rep:Loc")
drops_c <- c("var1","var2","sdcor")
varComp<-varComp[ , !(names(varComp) %in% drops_c )]
varComp<-varComp[ !(varComp$grp %in% drops_cc), ]
varComp$Trait<-trait[i]
VarComp <- rbind(VarComp,varComp)
} #end loop
VarComp_Output <-reshape(VarComp, idvar = "Trait", timevar = "grp", direction = "wide")
names(VarComp_Output) <- c("Trait","GxE","Env","Entry","Error")
VarComp_Output$H2 <- H2$h2
}##End across enviroment
#####################################################################
if (is.null(Env)) {
for (i in 1: leng_traits) {
y <- data[,trait[i]]
if(model=="RCB"){
fm <- lmer(y ~ (1|Entry)+(1|Rep))
}
else if (model=="Lattice"){
fm <- lmer(y~(1|Entry)+(1|Rep)+(1|Block:Rep))
}
blup <- coef(fm)$Entry
colnames(blup) <- trait[i]
Blups<-cbind(Blups,blup)
######h2
vc <- VarCorr(fm,comp="Variance")
VG <- vc$Entry[1]
VP<- vc$Entry[1] + attr(vc, "sc")^2/nrep
h2 <-data.frame( h2=VG/VP)
h2$trait <- trait[i]
H2<- rbind(H2,h2)
#* Variance Components
varComp<-as.data.frame(vc)
drops_cc<-  c("Block:Rep")
drops <- c("var1","var2","sdcor")
varComp<-varComp[ , !(names(varComp) %in% drops )]
varComp<-varComp[ !(varComp$grp %in% drops_cc), ]
varComp$Trait<-trait[i]
VarComp <- rbind(VarComp,varComp)
}##end for loop for one enviroment
VarComp_Output <-reshape(VarComp, idvar = "Trait", timevar = "grp", direction = "wide")
VarComp_Output<- round(VarComp_Output[2:4],4)
row.names(VarComp_Output) <-trait
VarComp_Output <- cbind(VarComp_Output ,H2$h2)
names(VarComp_Output) <- c("Genotype","Rep","Error","H2")
} # end for one enviroment
result <- list(VarianceComponets=VarComp_Output,Blups=Blups)
} ##end function
trait <- c("ears" ,"len"  ,   "weight"  ,"yield")
Ex_2<- Blup(dat$geno,dat$rep,Block = NULL,Env=NULL,trait,model = "RCB",dat)
Ex_2$VarianceComponets# <- variance componets and H2
Ex_2$Blups ## <- BLUPS
Entr_mean <- tapply(dat$ ears, dat$geno, mean)
Entr_mean
Ex_2$VarianceComponets$H2[1]
ovear_mean <- mean(Entr_mean)
ovear_mean
h2 <- Ex_2$VarianceComponets$H2[1]
h2
Entr_mean-ovear_mean*h2
bl<- Entr_mean-ovear_mean*h2
sum(bl)
Entr_mean-ovear_mean
h2
bl<- Entr_mean-ovear_mean*h2
over_mean+bl
ovear_mean+bl
m1 <- lmer(ears+(1|geno),data = dat)
m1 <- lmer(ears+(1|geno),data = dat)
head(dat)
m1 <- lmer(dat$ears+(1|dat$geno))
m1 <- lmer(dat$ears~(1|dat$geno))
summary(m1)
32.26/32.26+ (16.63/4)
32.26/(32.26+(16.63/4))
bl<- Entr_mean-ovear_mean*0.8858379
bl
bl<- Entr_mean-ovear_mean*0.8858379
bl
Entr_mean
ovear_mean
bl<- Entr_mean-ovear_mean*(0.8858379)
bl
Entr_mean
ovear_mean
41.900-42.5
-0.6*0.8858379
30667 /  30667 + (13226/2)
863.7 − 572.5
863.7 - 572.5
30667 /  (30667 + (13226/2))
f<- 30667 /  (30667 + (13226/2))
863.7 - 572.5*f
(863.7 - 572.5) *f
bl<- (Entr_mean-ovear_mean)*(0.8858379)
bl
ovear_mean+bl
h2
bl<- (Entr_mean-ovear_mean)*(h2)
bl
ovear_mean+bl
Ex_2$Blups
bl
ovear_mean+bl
bl<-ovear_mean+ (Entr_mean-ovear_mean)*(h2)
bl
bl<-ovear_mean+ (Entr_mean-ovear_mean)*(h2)
bl
Blups
Blups<-ovear_mean+ (Entr_mean-ovear_mean)*(h2)
Blups
